// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/outside.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutsideServiceClient is the client API for OutsideService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutsideServiceClient interface {
	GetData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	PutData(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
}

type outsideServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOutsideServiceClient(cc grpc.ClientConnInterface) OutsideServiceClient {
	return &outsideServiceClient{cc}
}

func (c *outsideServiceClient) GetData(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/proto.OutsideService/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outsideServiceClient) PutData(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/proto.OutsideService/PutData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutsideServiceServer is the server API for OutsideService service.
// All implementations should embed UnimplementedOutsideServiceServer
// for forward compatibility
type OutsideServiceServer interface {
	GetData(context.Context, *GetRequest) (*GetResponse, error)
	PutData(context.Context, *PutRequest) (*PutResponse, error)
}

// UnimplementedOutsideServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOutsideServiceServer struct {
}

func (UnimplementedOutsideServiceServer) GetData(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedOutsideServiceServer) PutData(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutData not implemented")
}

// UnsafeOutsideServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutsideServiceServer will
// result in compilation errors.
type UnsafeOutsideServiceServer interface {
	mustEmbedUnimplementedOutsideServiceServer()
}

func RegisterOutsideServiceServer(s grpc.ServiceRegistrar, srv OutsideServiceServer) {
	s.RegisterService(&OutsideService_ServiceDesc, srv)
}

func _OutsideService_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutsideServiceServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OutsideService/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutsideServiceServer).GetData(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutsideService_PutData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutsideServiceServer).PutData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OutsideService/PutData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutsideServiceServer).PutData(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OutsideService_ServiceDesc is the grpc.ServiceDesc for OutsideService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutsideService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OutsideService",
	HandlerType: (*OutsideServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _OutsideService_GetData_Handler,
		},
		{
			MethodName: "PutData",
			Handler:    _OutsideService_PutData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/outside.proto",
}
